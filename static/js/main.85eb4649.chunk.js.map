{"version":3,"sources":["components/MapComponent.js","components/ButtonPanel.js","App.js","index.js"],"names":["MapComponent","React","forwardRef","_ref","ref","markers","route","onMapClick","onMarkerClick","handleFindLocation","onMarkerDragEnd","useEffect","console","log","getIcon","type","emoji","backgroundColor","L","DivIcon","html","concat","className","_jsxs","Map","center","zoom","style","height","width","onClick","children","_jsx","TileLayer","url","attribution","ScaleControl","position","Search","map","marker","idx","Marker","lat","lng","icon","draggable","eventHandlers","click","dragend","e","target","getLatLng","getRouteSegments","segments","i","length","push","positions","color","segment","Polyline","ButtonPanel","onFindLocation","setMode","distances","currentPolylineDistance","lastPointDistance","clearRoute","swim","toFixed","run","defaultProps","App","mapRef","useRef","mode","useState","setMarkers","setRoute","setDistances","setCurrentPolylineDistance","setLastPointDistance","editingIndex","setEditingIndex","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","current","setView","error","alert","calculateDistance","newMarker","lastMarker","distance","getDistance","prev","lat1","lon1","lat2","lon2","dLat","Math","PI","dLon","a","sin","cos","atan2","sqrt","updateDistances","updatedRoute","swimDistance","runDistance","polylineDistance","latlng","updatedMarkers","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85eb4649.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Map, TileLayer, Marker, Polyline, ScaleControl } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport Search from 'react-leaflet-search';\n\n// Define the MapComponent as a forwardRef component\nconst MapComponent = React.forwardRef(({ markers, route, onMapClick, onMarkerClick, handleFindLocation, onMarkerDragEnd }, ref) => {\n\n  useEffect(() => {\n    console.log(\"MapComponent mounted\");\n    console.log(\"Markers: \", markers);\n    console.log(\"Route: \", route);\n  }, [markers, route]);\n\n  // Function to create custom icons based on the marker type\n  const getIcon = (type) => {\n    let emoji;\n    let backgroundColor;\n\n    if (type === 'start') {\n      emoji = '🟢'; // Green circle for start\n      backgroundColor = 'rgba(0, 128, 0, 0.5)';\n    } else if (type === 'swim') {\n      emoji = '🏊';\n      backgroundColor = 'rgba(0, 0, 255, 0.5)';\n    } else if (type === 'run') {\n      emoji = '🏃';\n      backgroundColor = 'rgba(255, 165, 0, 0.5)';\n    } else if (type === 'stop') {\n      emoji = '🏁'; // Checkered flag for stop\n      backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    }\n\n    return new L.DivIcon({\n      html: `<div style=\"background-color: ${backgroundColor}; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;\"><span style=\"font-size: 24px;\">${emoji}</span></div>`,\n      className: '',\n    });\n  };\n\n  // Function to get the color of the route segment based on the type\n  const getColor = (type) => {\n    return type === 'swim' ? '#2980b9' : '#e67e22';\n  };\n\n  // Function to generate the route segments for rendering\n  const getRouteSegments = () => {\n    const segments = [];\n    for (let i = 0; i < route.length - 1; i++) {\n      segments.push({\n        positions: [[route[i].lat, route[i].lng], [route[i + 1].lat, route[i + 1].lng]],\n        color: getColor(route[i].type),\n      });\n    }\n    return segments;\n  };\n\n  return (\n    <Map\n      center={[51.505, -0.09]}\n      zoom={13}\n      style={{ height: '100%', width: '100%' }}\n      ref={ref}\n      onClick={onMapClick}\n    >\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <ScaleControl position=\"bottomleft\" />\n      <Search position=\"topright\" />\n      {markers.map((marker, idx) => (\n        <Marker\n          key={idx}\n          position={[marker.lat, marker.lng]}\n          icon={getIcon(marker.type)}\n          draggable={true}\n          eventHandlers={{\n            click: () => onMarkerClick(idx),\n            dragend: (e) => {\n              const { lat, lng } = e.target.getLatLng();\n              onMarkerDragEnd(idx, lat, lng);\n            },\n          }}\n        />\n      ))}\n      {getRouteSegments().map((segment, idx) => (\n        <Polyline\n          key={idx}\n          positions={segment.positions}\n          color={segment.color}\n        />\n      ))}\n      <div className=\"find-location-btn\" onClick={handleFindLocation}>📍</div>\n    </Map>\n  );\n});\n\nexport default MapComponent;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ButtonPanel.css';\n\nconst ButtonPanel = ({ onFindLocation, setMode, distances, currentPolylineDistance, lastPointDistance, clearRoute }) => {\n  return (\n    <div className=\"button-panel\">\n      <div className=\"button-row\">\n        <button className=\"button-highlight\" onClick={() => setMode('swim')}>🏊 Start Swim</button>\n        <button className=\"button-highlight\" onClick={() => setMode('run')}>🏃 Start Run</button>\n        <button className=\"button-secondary\" onClick={() => setMode('stop')}>🏁 Stop Route</button>\n      </div>\n      <div className=\"button-row\">\n        <button className=\"button-primary\" onClick={onFindLocation}>📍 Find my location</button>\n        <button className=\"button-secondary\" onClick={clearRoute}>🗑️ Clear Route</button>\n      </div>\n      <div className=\"distances\">\n        <p>Swim: <span className=\"distance-highlight\">{distances.swim.toFixed(2)} km</span></p>\n        <p>Run: <span className=\"distance-highlight\">{distances.run.toFixed(2)} km</span></p>\n        <p>Total: <span className=\"distance-highlight\">{currentPolylineDistance.toFixed(2)} km</span></p>\n        <p>Last added: <span className=\"distance-highlight\">{lastPointDistance.toFixed(2)} km</span></p>\n      </div>\n    </div>\n  );\n};\n\nButtonPanel.propTypes = {\n  onFindLocation: PropTypes.func,\n  setMode: PropTypes.func.isRequired,\n  distances: PropTypes.shape({\n    swim: PropTypes.number,\n    run: PropTypes.number,\n  }).isRequired,\n  currentPolylineDistance: PropTypes.number.isRequired,\n  lastPointDistance: PropTypes.number.isRequired,\n  clearRoute: PropTypes.func.isRequired,\n};\n\nButtonPanel.defaultProps = {\n  onFindLocation: () => {},\n};\n\nexport default ButtonPanel;","import React from 'react';\nimport MapComponent from './components/MapComponent';\nimport ButtonPanel from './components/ButtonPanel';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const mapRef = React.useRef();\n  const [mode, setMode] = React.useState(null); // 'swim', 'run', 'stop'\n  const [markers, setMarkers] = React.useState([]);\n  const [route, setRoute] = React.useState([]);\n  const [distances, setDistances] = React.useState({ swim: 0, run: 0 });\n  const [currentPolylineDistance, setCurrentPolylineDistance] = React.useState(0); // Current polyline distance\n  const [lastPointDistance, setLastPointDistance] = React.useState(0); // Distance of the last added point\n  const [editingIndex, setEditingIndex] = React.useState(null);\n\n  const handleFindLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        if (mapRef.current) {\n          mapRef.current.setView([latitude, longitude], 13);\n        } else {\n          console.error(\"Map reference is not available\");\n        }\n      });\n    } else {\n      alert('Geolocation is not supported by this browser.');\n    }\n  };\n\n  const handleMapClick = (e) => {\n    const { lat, lng } = e.latlng;\n    const newMarker = { lat, lng, type: mode };\n\n    if (editingIndex !== null) {\n      const updatedMarkers = [...markers];\n      const updatedRoute = [...route];\n      updatedMarkers[editingIndex] = newMarker;\n      updatedRoute[editingIndex] = newMarker;\n      setMarkers(updatedMarkers);\n      setRoute(updatedRoute);\n      setEditingIndex(null);\n    } else {\n      if (mode === 'stop') {\n        setMarkers([...markers, newMarker]);\n        setRoute([...route, newMarker]);\n        setCurrentPolylineDistance(0); // Reset current polyline distance when stopping\n        setLastPointDistance(0); // Reset last point distance when stopping\n      } else if (mode === 'swim' || mode === 'run') {\n        if (route.length === 0) {\n          setMarkers([{ ...newMarker, type: 'start' }, newMarker]);\n          setRoute([newMarker]);\n        } else {\n          setMarkers([...markers, newMarker]);\n          setRoute([...route, newMarker]);\n        }\n        calculateDistance(newMarker);\n      }\n    }\n  };\n\n  const calculateDistance = (newMarker) => {\n    if (route.length > 0) {\n      const lastMarker = route[route.length - 1];\n      const distance = getDistance(lastMarker.lat, lastMarker.lng, newMarker.lat, newMarker.lng);\n      setCurrentPolylineDistance((prev) => prev + distance); // Update current polyline distance\n      setLastPointDistance(distance); // Update last point distance\n\n      if (mode === 'swim') {\n        setDistances((prev) => ({ ...prev, swim: prev.swim + distance }));\n      } else if (mode === 'run') {\n        setDistances((prev) => ({ ...prev, run: prev.run + distance }));\n      }\n    }\n  };\n\n  const getDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Radius of the Earth in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in kilometers\n    return distance;\n  };\n\n  const clearRoute = () => {\n    setMarkers([]);\n    setRoute([]);\n    setDistances({ swim: 0, run: 0 });\n    setCurrentPolylineDistance(0); // Reset current polyline distance when clearing\n    setLastPointDistance(0); // Reset last point distance when clearing\n  };\n\n  const handleMarkerClick = (index) => {\n    setEditingIndex(index);\n  };\n\n  const onMarkerDragEnd = (index, lat, lng) => {\n    const updatedMarkers = [...markers];\n    const updatedRoute = [...route];\n    updatedMarkers[index] = { ...updatedMarkers[index], lat, lng };\n    updatedRoute[index] = { ...updatedRoute[index], lat, lng };\n    setMarkers(updatedMarkers);\n    setRoute(updatedRoute);\n    updateDistances(updatedRoute);\n  };\n\n  const updateDistances = (updatedRoute) => {\n    let swimDistance = 0;\n    let runDistance = 0;\n    let polylineDistance = 0;\n    for (let i = 0; i < updatedRoute.length - 1; i++) {\n      const distance = getDistance(\n        updatedRoute[i].lat,\n        updatedRoute[i].lng,\n        updatedRoute[i + 1].lat,\n        updatedRoute[i + 1].lng\n      );\n      polylineDistance += distance;\n      if (updatedRoute[i].type === 'swim') {\n        swimDistance += distance;\n      } else if (updatedRoute[i].type === 'run') {\n        runDistance += distance;\n      }\n    }\n    setDistances({ swim: swimDistance, run: runDistance });\n    setCurrentPolylineDistance(polylineDistance);\n    if (updatedRoute.length > 1) {\n      setLastPointDistance(\n        getDistance(\n          updatedRoute[updatedRoute.length - 2].lat,\n          updatedRoute[updatedRoute.length - 2].lng,\n          updatedRoute[updatedRoute.length - 1].lat,\n          updatedRoute[updatedRoute.length - 1].lng\n        )\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n        <MapComponent\n          ref={mapRef}\n          markers={markers}\n          route={route}\n          onMapClick={handleMapClick}\n          onMarkerClick={handleMarkerClick}\n          handleFindLocation={handleFindLocation}\n          onMarkerDragEnd={onMarkerDragEnd}\n        />\n      </div>\n      <ButtonPanel\n        setMode={setMode}\n        clearRoute={clearRoute}\n        distances={distances}\n        currentPolylineDistance={currentPolylineDistance} // Pass current polyline distance\n        lastPointDistance={lastPointDistance} // Pass last point distance\n        onFindLocation={handleFindLocation}\n      />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}